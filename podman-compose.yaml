version: "3.8"

volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  open_webui_storage:
  pgadmin_storage:
  qdrant_storage:

networks:
  demo:

x-n8n: &service-n8n
  image: docker.io/n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres-podman
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=host.docker.internal:11434
  volumes:
    - n8n_storage:/home/node/.n8n

x-ollama: &service-ollama
  image: docker.io/ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: always
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: docker.io/ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  postgres:
    image: docker.io/postgres:16-alpine
    hostname: postgres
    container_name: postgres-podman
    networks: ['demo']
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    ports:
      - 5432:5432

  pgadmin:
    image: docker.io/dpage/pgadmin4:latest
    container_name: pgadmin
    networks: ['demo']
    restart: always
    ports:
      - "9876:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=marksusol@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pgadmin_storage:/var/lib/pgadmin

  open-webui:
    image: ghcr.io/open-webui/open-webui:latest
    restart: unless-stopped
    container_name: open-webui
    depends_on:
      - n8n
    ports:
      - "3000:8080"
    environment:
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - ENABLE_FUNCTIONS=True
    volumes:
      - open_webui_storage:/app/backend/data

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup

  n8n:
    <<: *service-n8n
    hostname: n8n-podman
    container_name: n8n-podman
    restart: always
    ports:
      - 5678:5678
    environment:
      - WEBHOOK_URL=http://n8n-podman:5678
    volumes:
      - ./n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared

  qdrant:
    image: docker.io/qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['demo']
    restart: always
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: docker.io/ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *init-ollama
    image: docker.io/ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd